* [#C] 437 [[https://leetcode.com/problems/path-sum-iii/][Path Sum III - LeetCode]]
** 题目
   You are given a binary tree in which each node contains an integer value.

   Find the number of paths that sum to a given value.

   The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

   The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.
*** Example:
    #+begin_example
    root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

          10
         /  \
        5   -3
       / \    \
      3   2   11
     / \   \
    3  -2   1

    Return 3. The paths that sum to 8 are:

    1.  5 -> 3
    2.  5 -> 2 -> 1
    3. -3 -> 11
    #+end_example
** 思路
   该题没有像 [[file:112PathSum.org][PathSum]] 一样限制需要从根节点到叶子节点。所以可以从任意的节点开始查找。
** Java
   #+begin_src java
   /**
    ,* Definition for a binary tree node.
    ,* public class TreeNode {
    ,*     int val;
    ,*     TreeNode left;
    ,*     TreeNode right;
    ,*     TreeNode() {}
    ,*     TreeNode(int val) { this.val = val; }
    ,*     TreeNode(int val, TreeNode left, TreeNode right) {
    ,*         this.val = val;
    ,*         this.left = left;
    ,*         this.right = right;
    ,*     }
    ,* }
    ,*/
   class Solution {
       public int pathSum(TreeNode root, int sum) {
           if (root == null) return 0;
           // 先找包含当前节点的
           int res = findPath(root, sum);
           // 再找不包含当前节点的
           res += pathSum(root.left, sum);
           res += pathSum(root.right, sum);
           return res;
       }

       private int findPath(TreeNode node, int sum) {
           if (node == null) return 0;
           int res = 0;
           if (node.val == sum) res++;
           res += findPath(node.left, sum - node.val);
           res += findPath(node.right, sum - node.val);
           return res;
       }
   }
   #+end_src
** CPP
   #+begin_src cpp
   /**
    ,* Definition for a binary tree node.
    ,* struct TreeNode {
    ,*     int val;
    ,*     TreeNode *left;
    ,*     TreeNode *right;
    ,*     TreeNode() : val(0), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
    ,* };
    ,*/
   class Solution {
   public:
       int pathSum(TreeNode* root, int sum) {
           if (root == NULL) return 0;

           int res = findPath(root, sum);
           res += pathSum(root->left, sum);
           res += pathSum(root->right, sum);
           return res;
       }
   private:
       int findPath(TreeNode* node, int sum) {
           if (node == NULL) return 0;

           int res = 0;
           if (node->val == sum) res++;
           res += findPath(node->left, sum - node->val);
           res += findPath(node->right, sum - node->val);
           return res;
       }
   };
   #+end_src
