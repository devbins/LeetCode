* [#B] 103 [[https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/][Binary Tree Zigzag Level Order Traversal - LeetCode]]
** 题目
   Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).
*** Example 1:
    [[file:imgs/103_binarytreezigzaglevelordertraversal.jpg]] 
    #+begin_example
    Input: root = [3,9,20,null,null,15,7]
    Output: [[3],[20,9],[15,7]]
    #+end_example
*** Example 2:
    #+begin_example
    Input: root = [1]
    Output: [[1]]
    #+end_example
*** Example 3:
    #+begin_example
    Input: root = []
    Output: []
    #+end_example
*** Constraints:
    - The number of nodes in the tree is in the range [0, 2000].
    - -100 <= Node.val <= 100
** Java
   思路：层序遍历，每层遍历顺序会变化一次，通过一个变量来控制是从左往右，还是从右往左。
   #+begin_src java
   /**
    ,* Definition for a binary tree node.
    ,* public class TreeNode {
    ,*     int val;
    ,*     TreeNode left;
    ,*     TreeNode right;
    ,*     TreeNode() {}
    ,*     TreeNode(int val) { this.val = val; }
    ,*     TreeNode(int val, TreeNode left, TreeNode right) {
    ,*         this.val = val;
    ,*         this.left = left;
    ,*         this.right = right;
    ,*     }
    ,* }
    ,*/
   class Solution {
       public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
           List<List<Integer>> levelList = new ArrayList();
           if (root == null) return levelList;
           boolean fromLeft = true;
           Queue<TreeNode> q = new LinkedList();
           q.offer(root);
           while (!q.isEmpty()) {
               int size = q.size();
               List<Integer> list = new ArrayList();
            
               for (int i = 0; i < size; i++) {
                   TreeNode node = q.poll();
                   if (fromLeft) {
                       list.add(node.val);
                   }else {
                       list.add(0, node.val);
                   }
                   if (node.left != null) q.offer(node.left);
                   if (node.right != null) q.offer(node.right);
               }
               fromLeft = !fromLeft;
               levelList.add(list);
           }
           return levelList;
       }
   }
   #+end_src
** CPP
   #+begin_src cpp
   /**
    ,* Definition for a binary tree node.
    ,* struct TreeNode {
    ,*     int val;
    ,*     TreeNode *left;
    ,*     TreeNode *right;
    ,*     TreeNode() : val(0), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
    ,* };
    ,*/
   class Solution {
   public:
       vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
           vector<vector<int>> res;
           if (root == nullptr) return res;
           queue<TreeNode*> q;
           q.push(root);
           bool fromLeft = true;
           while(!q.empty()) {
               int size = q.size();
               vector<int> level;
               for (int i = 0; i< size; ++i) {
                   auto node = q.front();
                   q.pop();
                   if (fromLeft) {
                       level.push_back(node->val);
                   } else {
                       level.insert(level.begin(), node->val);
                   }
                   if (node->left != nullptr) q.push(node->left);
                   if (node->right != nullptr) q.push(node->right);
               }
               res.push_back(level);
               fromLeft = !fromLeft;
           }
           return res;
       }
   };
   #+end_src
