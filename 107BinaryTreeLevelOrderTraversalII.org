* [#C] 107 [[https://leetcode.com/problems/binary-tree-level-order-traversal-ii/][Binary Tree Level Order Traversal II - LeetCode]]
  思路：层序遍历，和102题类似，先把每一层的元素加入到队列，计算每一层节点的个数，一次取出放到 =List= 中。
** Java
   #+begin_src java
   /**
    ,* Definition for a binary tree node.
    ,* public class TreeNode {
    ,*     int val;
    ,*     TreeNode left;
    ,*     TreeNode right;
    ,*     TreeNode() {}
    ,*     TreeNode(int val) { this.val = val; }
    ,*     TreeNode(int val, TreeNode left, TreeNode right) {
    ,*         this.val = val;
    ,*         this.left = left;
    ,*         this.right = right;
    ,*     }
    ,* }
    ,*/
   class Solution {
       public List<List<Integer>> levelOrderBottom(TreeNode root) {
           List<List<Integer>> levelList  = new ArrayList();
           // 注意 root 为空的判断，边界条件
           if (root == null) return levelList;
           Queue<TreeNode> q = new LinkedList();
           q.offer(root); 
        
           while (!q.isEmpty()) {
               int size = q.size();
               List<Integer> list = new ArrayList();
               for (int i = 0; i < size; i++) {
                   TreeNode node = q.poll();
                   list.add(node.val);
                
                   if (node.left != null) q.offer(node.left);
                   if (node.right != null) q.offer(node.right);
               }
               levelList.add(0, list);
           }
           return levelList;
       }
   }
   #+end_src
** CPP
   #+begin_src cpp
   /**
    ,* Definition for a binary tree node.
    ,* struct TreeNode {
    ,*     int val;
    ,*     TreeNode *left;
    ,*     TreeNode *right;
    ,*     TreeNode() : val(0), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
    ,* };
    ,*/
   class Solution {
   public:
       vector<vector<int>> levelOrderBottom(TreeNode* root) {
           vector<vector<int>> res;
           if (root == nullptr) 
               return res;
           queue<TreeNode*> q;
           q.push(root);
           while(!q.empty()) {
               int size = q.size();
               vector<int> level;
               for (int i = 0; i < size; ++i) {
                   auto node = q.front();
                   q.pop();
                   if (node->left != nullptr) q.push(node->left);
                   if (node->right != nullptr) q.push(node->right);
                   level.push_back(node->val);
               }
               res.insert(res.begin(), level);
           }
           return res;
       }
   };
   #+end_src
