* [#B] 98 [[https://leetcode.com/problems/validate-binary-search-tree/][Validate Binary Search Tree - LeetCode]]
** 题目
   Given a binary tree, determine if it is a valid binary search tree (BST).

   Assume a BST is defined as follows:
   - The left subtree of a node contains only nodes with keys less than the node's key.
   - The right subtree of a node contains only nodes with keys greater than the node's key.
   - Both the left and right subtrees must also be binary search trees.
*** Example 1:
    #+begin_example
        2
       / \
      1   3

    Input: [2,1,3]
    Output: true
    #+end_example
*** Example 2:
    #+begin_example
        5
       / \
      1   4
         / \
        3   6

    Input: [5,1,4,null,null,3,6]
    Output: false
    Explanation: The root node's value is 5 but its right child's value is 4.
    #+end_example
** 思路
   通过递归，判断当前节点的左节点是否小于当前节点，右节点是否大于当前节点。这里需要注意的是子树所有节点都要满足条件。
** Java
   #+begin_src java
   /**
    ,* Definition for a binary tree node.
    ,* public class TreeNode {
    ,*     int val;
    ,*     TreeNode left;
    ,*     TreeNode right;
    ,*     TreeNode() {}
    ,*     TreeNode(int val) { this.val = val; }
    ,*     TreeNode(int val, TreeNode left, TreeNode right) {
    ,*         this.val = val;
    ,*         this.left = left;
    ,*         this.right = right;
    ,*     }
    ,* }
    ,*/
   class Solution {
       public boolean isValidBST(TreeNode root) {
           return helper(root, null, null);
       }

       public boolean helper(TreeNode node, TreeNode min, TreeNode max) {
           if (node == null) return true;

           if (min != null && node.val <= min.val) return false;
           if (max != null && node.val >= max.val) return false;

           if (!helper(node.left, min, node)) return false;
           if (!helper(node.right, node, max)) return false;

           return true;
       }
   }
   #+end_src
** CPP
   #+begin_src cpp
   /**
    ,* Definition for a binary tree node.
    ,* struct TreeNode {
    ,*     int val;
    ,*     TreeNode *left;
    ,*     TreeNode *right;
    ,*     TreeNode() : val(0), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
    ,* };
    ,*/
   class Solution {
   public:
       bool isValidBST(TreeNode* root) {
           return helper(root, NULL, NULL);
       }
    
       bool helper(TreeNode* node, TreeNode* min, TreeNode* max) {
           if (node == NULL) return true;
        
           if (max != NULL && node->val >= max->val) return false;
           if (min != NULL && node->val <= min->val) return false;
        
           if (!helper(node->left, min, node)) return false;
           if (!helper(node->right, node, max)) return false;
        
           return true;
       }
   };
   #+end_src
