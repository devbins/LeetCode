* [#C] 111 [[https://leetcode.com/problems/minimum-depth-of-binary-tree/][Minimum Depth of Binary Tree - LeetCode]]
** 题目
   Given a binary tree, find its minimum depth.

   The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

   Note: A leaf is a node with no children.
*** Example 1:
    [[file:imgs/103_binarytreezigzaglevelordertraversal.jpg]] 
    #+begin_example
    Input: root = [3,9,20,null,null,15,7]
    Output: 2
    #+end_example
*** Example 2:
    #+begin_example
    Input: root = [2,null,3,null,4,null,5,null,6]
    Output: 5
    #+end_example
*** Constraints:
    - The number of nodes in the tree is in the range [0, 105].
    - -1000 <= Node.val <= 1000

** Java
   #+begin_src java
   /**
    ,* Definition for a binary tree node.
    ,* public class TreeNode {
    ,*     int val;
    ,*     TreeNode left;
    ,*     TreeNode right;
    ,*     TreeNode() {}
    ,*     TreeNode(int val) { this.val = val; }
    ,*     TreeNode(int val, TreeNode left, TreeNode right) {
    ,*         this.val = val;
    ,*         this.left = left;
    ,*         this.right = right;
    ,*     }
    ,* }
    ,*/
   class Solution {
       public int minDepth(TreeNode root) {
           if (root == null) return 0;
           int minLeftDepth = minDepth(root.left);
           int minRightDepth = minDepth(root.right);
           // 当只有左孩子或者右孩子的时候，要加上孩子的高度
           return (minLeftDepth == 0 || minRightDepth == 0) ? minLeftDepth + minRightDepth + 1 : Math.min(minLeftDepth, minRightDepth) + 1;
       }
   }
   #+end_src
** CPP
   #+begin_src cpp
   /**
    ,* Definition for a binary tree node.
    ,* struct TreeNode {
    ,*     int val;
    ,*     TreeNode *left;
    ,*     TreeNode *right;
    ,*     TreeNode() : val(0), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
    ,* };
    ,*/
   class Solution {
   public:
       int minDepth(TreeNode* root) {
           if (root == nullptr) return 0;
           int left = minDepth(root->left);
           int right = minDepth(root->right);
           return (left == 0 || right == 0) ? left + right + 1 : min(left, right) + 1;
       }
   };
   #+end_src
