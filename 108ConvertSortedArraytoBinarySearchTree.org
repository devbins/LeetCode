* [#C] 108 [[https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/][Convert Sorted Array to Binary Search Tree - LeetCode]]
** 题目
   Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

   For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
*** Example:
    #+begin_example
    Given the sorted array: [-10,-3,0,5,9],

    One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

          0
         / \
       -3   9
       /   /
     -10  5
    #+end_example
** 思路
   对于二分搜索树来说，它的中序遍历输出就是一个排好序的数组，所以在数组的中间就是根节点，左边部分是左子树，右边部分是右子树。通过递归就能实现把有序数组转换为二分搜索树。剩下的左边部分的中间就是左节点，同理剩下右边部分的中间恰好是右节点。
** Java
   #+begin_src java
   /**
    ,* Definition for a binary tree node.
    ,* public class TreeNode {
    ,*     int val;
    ,*     TreeNode left;
    ,*     TreeNode right;
    ,*     TreeNode() {}
    ,*     TreeNode(int val) { this.val = val; }
    ,*     TreeNode(int val, TreeNode left, TreeNode right) {
    ,*         this.val = val;
    ,*         this.left = left;
    ,*         this.right = right;
    ,*     }
    ,* }
    ,*/
   class Solution {
       public TreeNode sortedArrayToBST(int[] nums) {
           return helper(nums, 0, nums.length - 1);
       }
    
       public TreeNode helper(int[] nums, int l, int r) {
           if (l > r) return null;
           int mid = l + (r - l) / 2;
           TreeNode node = new TreeNode(nums[mid]);
           node.left = helper(nums, l, mid - 1);
           node.right = helper(nums, mid + 1, r);
           return node;
       }
   }
   #+end_src
** CPP
   #+begin_src cpp
   /**
    ,* Definition for a binary tree node.
    ,* struct TreeNode {
    ,*     int val;
    ,*     TreeNode *left;
    ,*     TreeNode *right;
    ,*     TreeNode() : val(0), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    ,*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
    ,* };
    ,*/
   class Solution {
   public:
       TreeNode* sortedArrayToBST(vector<int>& nums) {
           return helper(nums, 0, nums.size() - 1);
       }
    
       TreeNode* helper(vector<int>& nums, int l, int r) {
           if (l > r) return NULL;
           int mid = l + (r - l) / 2;
           TreeNode* node = new TreeNode(nums[mid]);
           node->left = helper(nums, l, mid - 1);
           node->right = helper(nums, mid + 1, r);
           return node;
       }
   };
   #+end_src
